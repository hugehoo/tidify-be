plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    // querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // jacoco
    id 'jacoco'

    // rest docs
    id "org.asciidoctor.jvm.convert" version "3.3.2"

}

group = 'tidify'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
apply plugin: "io.spring.dependency-management"

ext {
    springCloudVersion = '2021.0.3'
    queryDslVersion = "5.0.0"
    snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // facebook, naver 만 지원함 -> 내게 필요없는 라이브러리일지도.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'

    // openfeign
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // oauth
    implementation 'com.google.code.gson:gson:2.8.9'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    // webflux
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // swagger
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '3.10'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.50'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // rest-docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:2.0.5.RELEASE'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // flyway
    implementation 'org.flywaydb:flyway-core:6.4.2'

}

def querydslDir = "build/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform() //
//    finalizedBy jacocoTestReport
}
jacocoTestReport {
    // dependsOn : 이 작업에 지정된 종속성을 추가
    dependsOn test // jacocoTestReport 에 test라는 종속성을 추가
}


//asciidoctor { // asciidoctor 작업 구성
//    dependsOn test // test 작업 이후에 작동하도록 하는 설정
//    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
//    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성
//
//    // source가 없으면 .adoc파일을 전부 html로 만들어버림
//    // source 지정시 특정 adoc만 HTML로 만든다.
//    sources{
//        include("**/index.adoc","**/common/*.adoc")
//    }
//
//    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
//    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
//    baseDirFollowsSourceFile()
//}
//
//// static/docs 폴더 비우기
//asciidoctor.doFirst {
//    delete file('src/main/resources/static/docs')
//}
//
//// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("build/docs/asciidoc")
//    into file("src/main/resources/static/docs")
//}
//
//// build 의 의존작업 명시
//build {
//    dependsOn copyDocument
//}
//
//// 참고사항 //
//// 공식 문서에서는 위의 ascidoctor.doFirst부터 아래 내용은 없고 이와 같은 내용만 있습니다.
//// 이렇게 하면 jar로 만들어 질때 옮겨지는 것으로 IDE로 돌릴 때는 build 폴더에서만 확인이 가능합니다.
//// 위 방법을 사용하면 IDE에서도 static으로 옮겨진 것을 확인할 수 있습니다.
//// 위에 방법을 사용하든 아래 방법을 사용하든 편한 선택지를 사용하시면 됩니다.
//bootJar {
//    dependsOn copyDocument
//    from ("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }
//}


asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
//    from file("build/generated-snippets")
//    into file("src/main/resources/static/docs")
    from file("${asciidoctor.outputDir}")
    into file("build/resources/main/static")
}
//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("${asciidoctor.outputDir}")
//    into file("build/resources/main/static")
//}
bootJar {
    dependsOn copyDocument
//    from("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }
    from("${asciidoctor.outputDir}") {
        into "static/docs"
    }
}