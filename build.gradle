plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    // jacoco
    id 'jacoco'

    // rest docs
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'tidify'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
apply plugin: "io.spring.dependency-management"

ext {
    springCloudVersion = '2021.0.3'
    queryDslVersion = "5.0.0"
    snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // facebook, naver 만 지원함 -> 내게 필요없는 라이브러리일지도.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'

    // openfeign
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // oauth
    implementation 'com.google.code.gson:gson:2.8.9'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // webflux
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // swagger
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '3.10'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.50'

    // redis
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // rest-docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:2.0.5.RELEASE'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // jsoup
    implementation 'org.jsoup:jsoup:1.15.3'

    // prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

def querydslDir = "build/generated/querydsl"
//def querydslDir = layout.buildDirectory.dir("build/generated/querydsl").get().asFile
//tasks.compileQuerydsl.dependsOn(clean);
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform() //
}
jacocoTestReport {
    dependsOn test // jacocoTestReport 에 test라는 종속성을 추가
}



asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
    into file("build/resources/main/static")
}

bootJar {
    dependsOn copyDocument

    from("${asciidoctor.outputDir}") {
        into "static/docs"
    }
    layered {
        application {
            intoLayer("spring-boot-loader") {
                include "org/springframework/boot/loader/**"
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("snapshot-dependencies") {
                include "*:*:*SNAPSHOT"
            }
            intoLayer("dependencies")
        }
        layerOrder = ["dependencies", "spring-boot-loader", "snapshot-dependencies", "application"]
    }
}